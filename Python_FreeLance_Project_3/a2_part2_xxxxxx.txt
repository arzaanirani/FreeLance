Consider a to be a list of 10,000 items

targest_two:
  a.sort() uses roughly nlog2(n) operations which 140,000 operations. The pops
  take around 2 operations so we can say this function uses roughly 140,002.

smallest_half:
  a.sort() uses roughly nlog2(n) operations which 140,000 operations. Assigning
  variables takes 2 operations which brings us to 140,002. The for loop will then
  execute the summing function about 500 times, bringing our total to 140,502.

median:
  a.sort() uses roughly nlog2(n) operations which 140,000 operations. Assigning
  variables takes 2 operations which brings us to 140,002. Then there is an if
  statement and return statement, taking us to either 140,004 or 140,005 operations,
  due to the fact we must removed 2 items if length !% 2.

at_least_third:
  a.sort() uses roughly nlog2(n) operations which 140,000 operations. Assigning
  variables takes 3 operations which brings us to 140,003. The for loop iterates
  over every number, and with the for statements each operation is executed 1,000
  times, bringing our total to roughly 145,003 operations.

triple_sum:
  a.sort() uses roughly nlog2(n) operations which 140,000 operations. The number
  of triplet combinations is 1000!/(997!)/3! = 166,167,000. So the worst case is
  we execute 166,316,000 operations.
